plugins {
    id "net.minecraftforge.gradle" version "[6.0,6.2)"
    id "org.spongepowered.mixin" version "0.7.+"
    id "maven-publish"
    id "eclipse"
    id "idea"
}

version = minecraft_version + "_" + mod_version
group = mod_group_id
base { archivesName = mod_id }

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)
println "Java: ${System.getProperty "java.version"}, JVM: ${System.getProperty "java.vm.version"} (${System.getProperty "java.vendor"}), Arch: ${System.getProperty "os.arch"}"

minecraft {
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        configureEach {
            workingDirectory project.file("run")

            // Recommended logging data for a userdev environment
            property "forge.logging.markers", "REGISTRIES"

            // Recommended logging level for the console
            property "forge.logging.console.level", "debug"

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {  }
        server { args "--nogui" }
        gameTestServer {  }
    }
}

repositories {
    maven { url "https://api.modrinth.com/maven" }
    flatDir { dir "libs" }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
}

mixin {
    add sourceSets.main, "exhaustedspawners.mixins.refmap.json"
    config "exhaustedspawners.mixins.json"

    debug.verbose = true
    debug.export = true
    dumpTargetOnFailure = true

    quiet
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.named("processResources", ProcessResources).configure {
    var replaceProperties = [
        minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
        loader_version_range: loader_version_range,
        forge_version_range: forge_version_range,
        forge_version: forge_version,

        mod_id: mod_id, mod_name: mod_name, mod_url: mod_url,
        mod_license: mod_license, mod_version: mod_version,
        mod_authors: mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(["META-INF/mods.toml", "pack.mcmeta"]) {
        expand replaceProperties + [project: project]
    }
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
            "Specification-Title"     : mod_id,
            "Specification-Vendor"    : mod_authors,
            "Specification-Version"   : mod_version,
            "Implementation-Title"    : project.name,
            "Implementation-Version"  : project.jar.archiveVersion,
            "Implementation-Vendor"   : mod_authors,
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy "reobfJar"
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}
